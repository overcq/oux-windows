//-*-C-*-
//******************************************************************************
// Skróty do dokumentacji:
// ‘state’– stan obiektu.
// ‘mode’ wewn¹trzprogramowy– ze wzglêdu na odwewnêtrzn¹ dezintegralnoœæ (nieprzewidywalnoœæ przychodz¹cych sygna³ów) wejœæ/wyjœæ deterministycznych algorytmów przetwarzania danych w sterowniku– wyj¹tkowy (oparty na ·alternatywnych fragmentach· tego samego algorytmu w pe³nym determinizmie) tryb przetwarzania danych podczas przemiany wewnêtrznej.
// ‘req’– ¿¹danie realizacji funkcji zbiorczej.
// ‘ex’– uzupe³nienie rodzaju nastêpuj¹cej zmiany (np. ‘mode’).
//==============================================================================
struct E_window_Q_window_Z
{ struct E_mem_Q_tab_Z *object;
  HWND handle;
  HDC dc;
  HBITMAP drawable;
  I *object_mask;
  LONG width, height;
  unsigned U_R( req, draw ) :1;
};
//------------------------------------------------------------------------------
struct E_window_Z_drag_object_src
{ I window_id;
  I object_id;
};
//------------------------------------------------------------------------------
struct E_mem_Q_tab_Z *E_window_Q_window_S;
//==============================================================================
I
E_window_Q_window_M(
  int width
, int height
){  I window_id = E_mem_Q_tab_I_add( E_window_Q_window_S );
    if( !~window_id )
        return ~0;
    struct E_window_Q_window_Z *window = E_mem_Q_tab_R( E_window_Q_window_S, window_id );
    window->width = window->height = 0;
    U_L( window->req, draw );
    window->dc = 0;
    window->drawable = 0;
    window->object = E_mem_Q_tab_M( sizeof( struct E_window_Q_object_Z ), 0 );
    if( !window->object )
    {   GV_(NA);
        if( !~E_mem_Q_tab_I_remove( E_window_Q_window_S, window_id ))
        {   GV_(NA);
        }
        return ~0;
    }
    Mt_( window->object_mask, 0 );
    if( !window->object_mask )
    {   GV_(NA);
        E_mem_Q_tab_W( window->object );
        if( !~E_mem_Q_tab_I_remove( E_window_Q_window_S, window_id ))
        {   GV_(NA);
        }
        return ~0;
    }
    window->handle = CreateWindowEx(
      WS_EX_ACCEPTFILES
    , "main_window"
    , "OUX/C+ window"
    , WS_OVERLAPPEDWINDOW
    , CW_USEDEFAULT
    , CW_USEDEFAULT
    , width ? width : CW_USEDEFAULT
    , height ? height : CW_USEDEFAULT
    , 0
    , 0
    , E_base_S->E_flow_S_h_instance
    , 0
    );
    if( !window->handle )
    {   GV_(NA);
        W( window->object_mask );
        E_mem_Q_tab_W( window->object );
        if( !~E_mem_Q_tab_I_remove( E_window_Q_window_S, window_id ))
        {   GV_(NA);
        }
        return ~0;
    }
    ShowWindow( window->handle, E_window_S->cmd_show );
    UpdateWindow( window->handle );
    return window_id;
}
void
E_window_Q_window_W( I window_id
){  struct E_window_Q_window_Z *window = E_mem_Q_tab_R( E_window_Q_window_S, window_id );
    DestroyWindow( window->handle );
    W( window->object_mask );
    DeleteObject( window->drawable );
    DeleteDC( window->dc );
    E_mem_Q_tab_W( window->object );
    E_mem_Q_tab_I_remove( E_window_Q_window_S, window_id );
    /*if( U_R( display->mode, drag ))
    {   for_n( i, display->drag_S_object_src_n )
            if( display->drag_S_object_src[i].window_id == window_id )
            {   U_F( display->mode, drag_stop );
                    #ifdef E_flow_C_thread_system_unblock_reports
                E_flow_Q_thread_system_unblock_report_I_unblock( D_id(x_window,events), display_id );
                    #endif
                break;
            }
    }*/
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COLORREF
E_window_R_pixel( struct E_window_Q_window_Z *window
, LONG x
, LONG y
){  J_assert( x >= 0 );
    J_assert( y >= 0 );
    return GetPixel( window->dc, x, y );
}
//******************************************************************************
