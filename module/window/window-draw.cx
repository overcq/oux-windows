//-*-C-*-
//******************************************************************************
enum E_window_Z_aa_pixel
{ E_window_Z_aa_pixel_S_e = 1 << 0,
  E_window_Z_aa_pixel_S_se = 1 << 1,
  E_window_Z_aa_pixel_S_s = 1 << 2,
  E_window_Z_aa_pixel_S_sw = 1 << 3,
  E_window_Z_aa_pixel_S_w = 1 << 4,
  E_window_Z_aa_pixel_S_nw = 1 << 5,
  E_window_Z_aa_pixel_S_n = 1 << 6,
  E_window_Z_aa_pixel_S_ne = 1 << 7
};
struct E_window_Z_arc
{ int left, top, right, bottom;
  int angle_start_x, angle_start_y, angle_end_x, angle_end_y;
};
//==============================================================================
COLORREF
E_window_Z_color_M_gray( N8 luminance
){  return RGB( luminance, luminance, luminance );
}
COLORREF
E_window_Z_color_P_luminance( COLORREF color
, F luminance
){  J_assert( luminance >= 0 && luminance <= 1 );
    N8 red = GetRValue(color);
    N8 green = GetGValue(color);
    N8 blue = GetBValue(color);
    F color_luminance = E_window_Z_color_R_luminance( color );
    if( luminance < color_luminance )
    {   red = lround( red * luminance / color_luminance );
        green = lround( green * luminance / color_luminance );
        blue = lround( blue * luminance / color_luminance );
    }else if( luminance > color_luminance )
    {   red += lround(( 0xff - red ) * ( luminance - color_luminance ) / ( 1 - color_luminance ));
        green += lround(( 0xff - green ) * ( luminance - color_luminance ) / ( 1 - color_luminance ));
        blue += lround(( 0xff - blue ) * ( luminance - color_luminance ) / ( 1 - color_luminance ));
    }else
        return color;
    return RGB( red, green, blue );
}
F
E_window_Z_color_R_luminance( COLORREF color
){  return 0;//( display->red_luminance_ratio * GetRValue(color) + display->green_luminance_ratio * GetGValue(color) + display->blue_luminance_ratio * GetBValue(color) ) / 255;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_window_Q_window_I_draw_P_color( COLORREF color
){  E_window_S->draw_color = color;
}
B
E_window_Q_window_I_draw_P_pen( struct E_window_Q_window_Z *window
, COLORREF color
){  HPEN pen = CreatePen( PS_SOLID, 0, color );
    if(pen)
    {   HPEN old_pen = SelectObject( window->dc, pen );
        if( !old_pen )
        {   DeleteObject(pen);
            return false;
        }
        DeleteObject( old_pen );
    }
    return pen;
}
B
E_window_Q_window_I_draw_P_brush( struct E_window_Q_window_Z *window
, COLORREF color
){  HBRUSH brush = CreateSolidBrush(color);
    if(brush)
    {   HPEN old_brush = SelectObject( window->dc, brush );
        if( !old_brush )
        {   DeleteObject(brush);
            return false;
        }
        DeleteObject( old_brush );
    }
    return brush;
}
B
E_window_Q_object_mask_I_draw_P_pen( struct E_window_Q_window_Z *window
, I object_id
){  HPEN pen = CreatePen( PS_SOLID, 0, object_id );
    if(pen)
    {   HPEN old_pen = SelectObject( window->dc_object_mask, pen );
        if( !old_pen )
        {   DeleteObject(pen);
            return false;
        }
        DeleteObject( old_pen );
    }
    return pen;
}
B
E_window_Q_object_mask_I_draw_P_brush( struct E_window_Q_window_Z *window
, I object_id
){  HBRUSH brush = CreateSolidBrush( object_id );
    if(brush)
    {   HPEN old_brush = SelectObject( window->dc_object_mask, brush );
        if( !old_brush )
        {   DeleteObject(brush);
            return false;
        }
        DeleteObject( old_brush );
    }
    return brush;
}
//------------------------------------------------------------------------------
B
E_window_Q_window_I_draw_Z_points(
  struct E_window_Q_window_Z *window
, N n
, POINT *points
){  J_assert(n);
    for_n( i, n )
        if( points[i].x < window->width && points[i].y < window->height )
        {   if( U_R( E_window_S->state, draw_object_drag_move ))
            {   HRGN res = CreateRectRgn( 0, 0, 0, 0 );
                if( !res )
                    return false;
                HRGN combine = CreateRectRgn( points[i].x, points[i].y, points[i].x + 1, points[i].y + 1 );
                if( !combine )
                {   DeleteObject(res);
                    return false;
                }
                if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
                {   DeleteObject(combine);
                    DeleteObject(res);
                    return false;
                }
                DeleteObject( E_window_S->region );
                DeleteObject(combine);
                E_window_S->region = res;
            }
            if( !SetPixelV( window->dc, points[i].x, points[i].y, E_window_S->draw_color )
            || ( !U_R( E_window_S->state, draw_object_drag_move ) && !SetPixelV( window->dc_object_mask, points[i].x, points[i].y, E_window_S->current_object ))
            )
                return false;
        }
    return true;
}
B
E_window_Q_window_I_draw_aa_Z_points(
  struct E_window_Q_window_Z *window
, N n
, POINT *points
, F brightness
){  J_assert(n);
    J_assert( brightness >= 0 && brightness <= 1 );
    COLORREF *Mt_( colors, n );
    if( !colors )
        return false;
    for_n( i, n )
    {   N p[8];
        p[0] = points[i].x + 1 < window->width ? E_window_Q_image_R_pixel( window, points[i].x + 1, points[i].y ) : E_window_S->draw_color;
        p[1] = points[i].x + 1 < window->width && points[i].y + 1 < window->height ? E_window_Q_image_R_pixel( window, points[i].x + 1, points[i].y + 1 ) : E_window_S->draw_color;
        p[2] = points[i].y + 1 < window->height ? E_window_Q_image_R_pixel( window, points[i].x, points[i].y + 1 ) : E_window_S->draw_color;
        p[3] = points[i].x > 0 && points[i].y + 1 < window->height ? E_window_Q_image_R_pixel( window, points[i].x - 1, points[i].y + 1 ) : E_window_S->draw_color;
        p[4] = points[i].x > 0 ? E_window_Q_image_R_pixel( window, points[i].x - 1, points[i].y ) : E_window_S->draw_color;
        p[5] = points[i].x > 0 && points[i].y > 0 ? E_window_Q_image_R_pixel( window, points[i].x - 1, points[i].y - 1 ) : E_window_S->draw_color;
        p[6] = points[i].y > 0 ? E_window_Q_image_R_pixel( window, points[i].x, points[i].y - 1 ) : E_window_S->draw_color;
        p[7] = points[i].x + 1 < window->width && points[i].y > 0 ? E_window_Q_image_R_pixel( window, points[i].x + 1, points[i].y - 1 ) : E_window_S->draw_color;
        N n_ = 0;
        N background_red = 0, background_green = 0, background_blue = 0;
        for_n( j, 8 )
            if( p[j] != E_window_S->draw_color )
            {   background_red += GetRValue( p[j] );
                background_green += GetGValue( p[j] );
                background_blue += GetBValue( p[j] );
                n_++;
            }
        if( n_ )
        {   background_red /= n_;
            background_green /= n_;
            background_blue /= n_;
        }else
        {   background_red = GetRValue( E_window_Q_theme.window_bg );
            background_green = GetGValue( E_window_Q_theme.window_bg );
            background_blue = GetBValue( E_window_Q_theme.window_bg );
        }
        N red = GetRValue( E_window_S->draw_color );
        N green = GetGValue( E_window_S->draw_color );
        N blue = GetBValue( E_window_S->draw_color );
        if( red > background_red )
            red = background_red + ( red - background_red ) * brightness;
        else
            red = background_red - ( background_red - red ) * brightness;
        if( green > background_green )
            green = background_green + ( green - background_green ) * brightness;
        else
            green = background_green - ( background_green - green ) * brightness;
        if( blue > background_blue )
            blue = background_blue + ( blue - background_blue ) * brightness;
        else
            blue = background_blue - ( background_blue - blue ) * brightness;
        colors[i] = RGB( red, green, blue );
    }
    for_n_( i, n )
    {   E_window_Q_window_I_draw_P_color( colors[i] );
        E_window_Q_window_I_draw_Z_points( window, 1, &points[i] );
    }
    W(colors);
    return true;
}
B
E_window_Q_window_I_draw_Z_lines(
  struct E_window_Q_window_Z *window
, N n
, POINT *points
, DWORD thickness
){  J_assert( n > 1 );
    J_assert( thickness > 0 );
    HPEN pen = ExtCreatePen( PS_GEOMETRIC | PS_SOLID | PS_ENDCAP_FLAT | PS_JOIN_BEVEL
    , thickness
    , &( LOGBRUSH )
      { BS_SOLID
      , E_window_S->draw_color
      }
    , 0, 0
    );
    if( !pen )
        return false;
    HPEN old_pen = SelectObject( window->dc, pen );
    if( !old_pen )
    {   DeleteObject(pen);
        return false;
    }
    HPEN pen_object_mask, old_pen_object_mask;
    if( !U_R( E_window_S->state, draw_object_drag_move ))
    {   pen_object_mask = ExtCreatePen( PS_GEOMETRIC | PS_SOLID | PS_ENDCAP_FLAT | PS_JOIN_BEVEL
        , thickness
        , &( LOGBRUSH )
          { BS_SOLID
          , E_window_S->current_object
          }
        , 0, 0
        );
        if( !pen_object_mask )
        {   if( SelectObject( window->dc, old_pen ))
                DeleteObject(pen);
            else
                DeleteObject( old_pen );
            return false;
        }
        old_pen_object_mask = SelectObject( window->dc_object_mask, pen_object_mask );
        if( !old_pen_object_mask )
        {   DeleteObject( pen_object_mask );
            if( SelectObject( window->dc, old_pen ))
                DeleteObject(pen);
            else
                DeleteObject( old_pen );
            return false;
        }
    }
    B ret = Polyline( window->dc, points, n )
    && ( U_R( E_window_S->state, draw_object_drag_move ) || Polyline( window->dc_object_mask, points, n ));
End:if( SelectObject( window->dc, old_pen ))
        DeleteObject(pen);
    else
        DeleteObject( old_pen );
    if( !U_R( E_window_S->state, draw_object_drag_move ))
        if( SelectObject( window->dc_object_mask, old_pen_object_mask ))
            DeleteObject( pen_object_mask );
        else
            DeleteObject( old_pen_object_mask );
    return ret;
}
B
E_window_Q_window_I_draw_Z_rectangles(
  struct E_window_Q_window_Z *window
, N n
, RECT *rectangles
){  J_assert(n);
    if( U_R( E_window_S->state, draw_object_drag_move ))
    {   for_n( i, n )
        {   HRGN res = CreateRectRgn( 0, 0, 0, 0 );
            if( !res )
                return false;
            HRGN combine = CreateRectRgn( rectangles[i].left, rectangles[i].top, rectangles[i].right, rectangles[i].top + 1 );
            if( !combine )
            {   DeleteObject(res);
                return false;
            }
            if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
            {   DeleteObject(combine);
                DeleteObject(res);
                return false;
            }
            DeleteObject( E_window_S->region );
            DeleteObject(combine);
            E_window_S->region = CreateRectRgn( 0, 0, 0, 0 );
            if( !E_window_S->region )
                return false;
            combine = CreateRectRgn( rectangles[i].right - 1, rectangles[i].top, rectangles[i].right, rectangles[i].bottom );
            if( !combine )
            {   DeleteObject(res);
                return false;
            }
            if( CombineRgn( E_window_S->region, res, combine, RGN_OR ) == ERROR )
            {   DeleteObject(combine);
                DeleteObject(res);
                return false;
            }
            DeleteObject(res);
            DeleteObject(combine);
            res = CreateRectRgn( 0, 0, 0, 0 );
            if( !res )
                return false;
            combine = CreateRectRgn( rectangles[i].left, rectangles[i].bottom - 1, rectangles[i].right, rectangles[i].bottom );
            if( !combine )
            {   DeleteObject(res);
                return false;
            }
            if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
            {   DeleteObject(combine);
                DeleteObject(res);
                return false;
            }
            DeleteObject( E_window_S->region );
            DeleteObject(combine);
            E_window_S->region = CreateRectRgn( 0, 0, 0, 0 );
            if( !E_window_S->region )
                return false;
            combine = CreateRectRgn( rectangles[i].left, rectangles[i].top, rectangles[i].left + 1, rectangles[i].bottom );
            if( !combine )
            {   DeleteObject(res);
                return false;
            }
            if( CombineRgn( E_window_S->region, res, combine, RGN_OR ) == ERROR )
            {   DeleteObject(combine);
                DeleteObject(res);
                return false;
            }
            DeleteObject(res);
            DeleteObject(combine);
        }
    }
    HBRUSH brush = CreateSolidBrush( E_window_S->draw_color );
    HBRUSH brush_object_mask = CreateSolidBrush( E_window_S->current_object );
    for_n( i, n )
    {   if( !FrameRect( window->dc, &rectangles[i], brush )
        || ( !U_R( E_window_S->state, draw_object_drag_move ) && !FrameRect( window->dc_object_mask, &rectangles[i], brush_object_mask ))
        )
        {   DeleteObject( brush_object_mask );
            DeleteObject(brush);
            return false;
        }
    }
    DeleteObject( brush_object_mask );
    DeleteObject(brush);
    return true;
}
B
E_window_Q_window_I_draw_Z_arcs(
  struct E_window_Q_window_Z *window
, N n
, struct E_window_Z_arc *arcs
){  J_assert(n);
    if( U_R( E_window_S->state, draw_object_drag_move ))
        ; //NDFN Brak procedury rysowania 'regionu' dla "drag & drop".
    E_window_Q_object_mask_I_draw_P_pen( window, E_window_S->current_object );
    for_n( i, n )
    {   if( !Arc( window->dc
        , arcs[i].left, arcs[i].top, arcs[i].right, arcs[i].bottom
        , arcs[i].angle_start_x, arcs[i].angle_start_y
        , arcs[i].angle_end_x, arcs[i].angle_end_y
        )
        || ( !U_R( E_window_S->state, draw_object_drag_move ) && !Arc( window->dc_object_mask
        , arcs[i].left, arcs[i].top, arcs[i].right, arcs[i].bottom
        , arcs[i].angle_start_x, arcs[i].angle_start_y
        , arcs[i].angle_end_x, arcs[i].angle_end_y
        )))
            return false;
    }
    return true;
}
B
E_window_Q_window_I_fill_Z_points(
  struct E_window_Q_window_Z *window
, N n
, POINT *points
){  J_assert( n > 2 );
    if( U_R( E_window_S->state, draw_object_drag_move ))
    {   //NDFN Brak procedury rysowania 'regionu' dla "drag & drop".
        HRGN res = CreateRectRgn( 0, 0, 0, 0 );
        if( !res )
            return false;
        HRGN combine = CreatePolygonRgn( points, n, WINDING );
        if( !combine )
        {   DeleteObject(res);
            return false;
        }
        if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
        {   DeleteObject(combine);
            DeleteObject(res);
            return false;
        }
        DeleteObject( E_window_S->region );
        DeleteObject(combine);
        E_window_S->region = res;
    }
    E_window_Q_object_mask_I_draw_P_pen( window, E_window_S->current_object );
    E_window_Q_object_mask_I_draw_P_brush( window, E_window_S->current_object );
    return Polygon( window->dc, points, n )
    && ( U_R( E_window_S->state, draw_object_drag_move ) || Polygon( window->dc_object_mask, points, n ));
}
B
E_window_Q_window_I_fill_Z_rectangles(
  struct E_window_Q_window_Z *window
, N n
, RECT *rectangles
){  J_assert(n);
    if( U_R( E_window_S->state, draw_object_drag_move ))
    {   for_n( i, n )
        {   HRGN res = CreateRectRgn( 0, 0, 0, 0 );
            if( !res )
                return false;
            HRGN combine = CreateRectRgnIndirect( &rectangles[i] );
            if( !combine )
            {   DeleteObject(res);
                return false;
            }
            if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
            {   DeleteObject(combine);
                DeleteObject(res);
                return false;
            }
            DeleteObject( E_window_S->region );
            DeleteObject(combine);
            E_window_S->region = res;
        }
    }
    E_window_Q_object_mask_I_draw_P_pen( window, E_window_S->current_object );
    E_window_Q_object_mask_I_draw_P_brush( window, E_window_S->current_object );
    for_n( i, n )
    {   if( !Rectangle( window->dc, rectangles[i].left, rectangles[i].top, rectangles[i].right, rectangles[i].bottom )
        || ( !U_R( E_window_S->state, draw_object_drag_move ) && !Rectangle( window->dc_object_mask, rectangles[i].left, rectangles[i].top, rectangles[i].right, rectangles[i].bottom ))
        )
            return false;
    }
    return true;
}
B
E_window_Q_window_I_fill_Z_arcs(
  struct E_window_Q_window_Z *window
, N n
, RECT *arcs
){  J_assert(n);
    if( U_R( E_window_S->state, draw_object_drag_move ))
    {   for_n( i, n )
        {   HRGN res = CreateRectRgn( 0, 0, 0, 0 );
            if( !res )
                return false;
            HRGN combine = CreateEllipticRgnIndirect( &arcs[i] );
            if( !combine )
            {   DeleteObject(res);
                return false;
            }
            if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
            {   DeleteObject(combine);
                DeleteObject(res);
                return false;
            }
            DeleteObject( E_window_S->region );
            DeleteObject(combine);
            E_window_S->region = res;
        }
    }
    E_window_Q_object_mask_I_draw_P_pen( window, E_window_S->current_object );
    E_window_Q_object_mask_I_draw_P_brush( window, E_window_S->current_object );
    for_n( i, n )
    {   if( !Ellipse( window->dc, arcs[i].left, arcs[i].top, arcs[i].right, arcs[i].bottom )
        || ( !U_R( E_window_S->state, draw_object_drag_move ) && !Ellipse( window->dc_object_mask, arcs[i].left, arcs[i].top, arcs[i].right, arcs[i].bottom ))
        )
            return false;
    }
    return true;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_window_Q_object_I_draw_P_color(
  struct E_window_Q_object_Z *object
, COLORREF color
){  if( !U_R( object->state, drag_src ))
        E_window_Q_window_I_draw_P_color(color);
}
//------------------------------------------------------------------------------
B
E_window_Q_object_I_draw_Z_points(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, POINT *points
){  for_n( i, n )
    {   points[i].x += object->x;
        points[i].y += object->y;
    }
    return E_window_Q_window_I_draw_Z_points( window, n, points );
}
B
E_window_Q_object_I_draw_aa_Z_points(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, POINT *points
, F brightness
){  for_n( i, n )
    {   points[i].x += object->x;
        points[i].y += object->y;
    }
    if( !~E_window_Q_window_I_draw_aa_Z_points( window
    , n
    , points
    , brightness
    ))
        return false;
    return true;
}
B
E_window_Q_object_I_draw_Z_lines(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, POINT *points
, DWORD thickness
){  for_n( i, n )
    {   points[i].x += object->x;
        points[i].y += object->y;
    }
    B ret = E_window_Q_window_I_draw_Z_lines( window, n, points, thickness );
    if( !ret )
        return false;
    if( U_R( E_window_S->state, draw_object_drag_move ))
    {   struct E_window_Q_window_Z *window_ = E_mem_Q_tab_R( E_window_Q_window_S, E_window_S->dnd_src_window );
        struct E_window_Q_object_Z *object_ = E_mem_Q_tab_R( window_->object, E_window_S->dnd_src_object );
        for_n( x, object_->width )
        {   for_n( y, object_->height )
                if( E_window_Q_object_mask_R_object_id( window_, object_->x + x, object_->y + y ) == E_window_S->dnd_src_object )
                {   HRGN res = CreateRectRgn( 0, 0, 0, 0 );
                    if( !res )
                        return false;
                    HRGN combine = CreateRectRgn( object->x + x, object->y + y, object->x + x + 1, object->y + y + 1 );
                    if( !combine )
                    {   DeleteObject(res);
                        return false;
                    }
                    if( CombineRgn( res, E_window_S->region, combine, RGN_OR ) == ERROR )
                    {   DeleteObject(combine);
                        DeleteObject(res);
                        return false;
                    }
                    DeleteObject( E_window_S->region );
                    DeleteObject(combine);
                    E_window_S->region = res;
                }
        }
    }
    return true;
}
B
E_window_Q_object_I_draw_Z_rectangles(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, RECT *rectangles
){  for_n( i, n )
    {   rectangles[i].left += object->x;
        rectangles[i].top += object->y;
        rectangles[i].right += object->x;
        rectangles[i].bottom += object->y;
    }
    return E_window_Q_window_I_draw_Z_rectangles( window, n, rectangles );
}
B
E_window_Q_object_I_draw_Z_arcs(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, RECT *arcs
){  for_n( i, n )
    {   arcs[i].left += object->x;
        arcs[i].top += object->y;
        arcs[i].right += object->x;
        arcs[i].bottom += object->y;
    }
    return E_window_Q_window_I_draw_Z_arcs( window, n, arcs );
}
B
E_window_Q_object_I_fill_Z_points(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, POINT *points
){  for_n( i, n )
    {   points[i].x += object->x;
        points[i].y += object->y;
    }
    return E_window_Q_window_I_fill_Z_points( window, n, points );
}
B
E_window_Q_object_I_fill_Z_rectangles(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, RECT *rectangles
){  for_n( i, n )
    {   rectangles[i].left += object->x;
        rectangles[i].top += object->y;
        rectangles[i].right += object->x;
        rectangles[i].bottom += object->y;
    }
    return E_window_Q_window_I_fill_Z_rectangles( window, n, rectangles );
}
B
E_window_Q_object_I_fill_Z_arcs(
  struct E_window_Q_window_Z *window
, struct E_window_Q_object_Z *object
, N n
, RECT *arcs
){  for_n( i, n )
    {   arcs[i].left += object->x;
        arcs[i].top += object->y;
        arcs[i].right += object->x;
        arcs[i].bottom += object->y;
    }
    return E_window_Q_window_I_fill_Z_arcs( window, n, arcs );
}
//******************************************************************************
