//-*-C-*-
//******************************************************************************
//DFN globalnie: usuniêcie ‹modu³u› ([…]“_W”) mo¿e byæ wykonane w programie tylko raz.
//==============================================================================
void
E_mem_W_file( void
){  for_each( id, E_base_S->E_mem_Q_file_S, E_mem_Q_tab )
    {   struct E_mem_Q_file_Z *file = E_mem_Q_tab_R( E_base_S->E_mem_Q_file_S, id );
        if( !U_R( file->mode, readonly ))
        {   if( file->type == FILE_TYPE_UNKNOWN )
            {   B err = no;
                V( SetFilePointer( file->handle, file->l, 0, FILE_BEGIN ) != INVALID_SET_FILE_POINTER )
                    err = yes;
                if( !err )
                    V( SetEndOfFile( file->handle )){}
            }
            if( file->unsaved_n )
            {   struct E_mem_Z_range *range = file->unsaved;
                N last_pos_end = 0;
                for_n( unsaved_i, file->unsaved_n )
                {   for_n( blk_i, file->blk_n )
                        if( range->pos < file->blk[ blk_i ].pos )
                            break;
                    blk_i--;
                    if( range->pos_end < last_pos_end )
                    {   range++;
                        continue;
                    }
                    last_pos_end = E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l );
                    if( blk_i != file->blk_n - 1 )
                    {   N pos;
                        for( pos = E_simple_Z_n_I_align_down_to_v2( range->pos, E_base_S->E_mem_Q_file_S_buffer_l ); pos != E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ); pos += E_base_S->E_mem_Q_file_S_buffer_l )
                        {   E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, E_base_S->E_mem_Q_file_S_buffer_l );
                            N l = E_mem_Q_file_I_write_pos_blk( file->handle
                            , pos
                            , E_base_S->E_mem_Q_file_S_buffer
                            , E_base_S->E_mem_Q_file_S_buffer_l
                            );
                        }
                    }else
                    {   N pos;
                        for( pos = E_simple_Z_n_I_align_down_to_v2( range->pos, E_base_S->E_mem_Q_file_S_buffer_l ); pos != E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ) - E_base_S->E_mem_Q_file_S_buffer_l; pos += E_base_S->E_mem_Q_file_S_buffer_l )
                        {   E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, E_base_S->E_mem_Q_file_S_buffer_l );
                            N l = E_mem_Q_file_I_write_pos_blk( file->handle
                            , pos
                            , E_base_S->E_mem_Q_file_S_buffer
                            , E_base_S->E_mem_Q_file_S_buffer_l
                            );
                        }
                        N buffer_l = J_min( E_simple_Z_n_I_align_up_to_v2( range->pos_end, E_base_S->E_mem_Q_file_S_buffer_l ), file->l ) - pos;
                        E_mem_Q_blk_I_copy( E_base_S->E_mem_Q_file_S_buffer, file->blk[ blk_i ].data + pos - file->blk[ blk_i ].pos, buffer_l );
                        N l = E_mem_Q_file_I_write_pos_blk( file->handle
                        , pos
                        , E_base_S->E_mem_Q_file_S_buffer
                        , E_base_S->E_mem_Q_file_S_buffer_l
                        );
                    }
                    range++;
                }
            }
        }
    }
}
//TODO Procedura do u³o¿enia.
void
E_base_W( void
){  D_W( mem, file_save );
    D_W( flow, call_srv ); // Przedostatnie ‹zadanie›.
    // Dopóki wypisywanie “G”[…] jest do tego samego “strumienia” jak “G”[…]“_”, to jeœli ‹raporty linii› s¹ w³¹czone, to znak nowej linii jest dorzucany synchronicznie, na koñcu tej procedury usuwania ‹modu³u›.
        //#ifdef C_line_report
    //E_io_Q_stream_out_P_c( 0, '\n' );
        //#endif
    struct E_flow_Q_task_Z *task = E_mem_Q_tab_R( E_base_S->E_flow_Q_task_S, 0 );
    task->run_state = E_flow_Z_run_state_S_ready;
    I_B(); // Mo¿e prze³¹czyæ do ostatniego ‹zadania›.
//    D_W( io, stream_write );
    for_each( call_id, E_base_S->E_flow_Q_process_call_cli_S, E_mem_Q_tab )
    {   struct E_flow_Q_process_call_cli_Z *call = E_mem_Q_tab_R( E_base_S->E_flow_Q_process_call_cli_S, call_id );
//        E_mem_Q_shared_W( call->shm_id );
    }
    E_mem_W_file();
        #ifdef C_line_report
    E_flow_Z_line_report_I_write_Z_c( '\n' );
        #endif
}
//******************************************************************************
